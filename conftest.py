import pytest
import allure
import os
from playwright.sync_api import sync_playwright
from utils.date_utils import get_current_date
from utils.mobile_devices import MOBILE_DEVICES

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (qroom)
CURRENT_DIR = os.path.abspath(os.path.dirname(__file__))  # –ü—É—Ç—å –∫ tests/
PROJECT_DIR = os.path.abspath(os.path.join(CURRENT_DIR, "..", "qroom"))  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º qroom/
SCREENSHOT_DIR = os.path.join(PROJECT_DIR, "artifacts", "screenshots")

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(SCREENSHOT_DIR, exist_ok=True)

# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ Chrome, Firefox, WebKit
# @pytest.fixture(scope="function", params=["chromium"])
@pytest.fixture(scope="function", params=["chromium", "firefox", "webkit"])
def browser(request):
    with sync_playwright() as playwright:
        browser = getattr(playwright, request.param).launch(headless=False)
        yield browser
        browser.close()

# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@pytest.fixture(scope="function", autouse=True)
def page(browser):
    context = browser.new_context()
    page = context.new_page()
    yield page
    page.close()

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ Allure
@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    report = outcome.get_result()

    if report.failed:
        page = item.funcargs.get("page")
        browser_name = item.callspec.params["browser"]

        if page:
            test_name = item.name
            timestamp = get_current_date().replace(":", "-")
            screenshot_path = os.path.join(SCREENSHOT_DIR, f"{test_name}_{browser_name}_{timestamp}.png")

            # –û—Ç–ª–∞–¥–∫–∞
            # print(f"üîç –¢–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥: {os.getcwd()}")
            # print(f"üì∏ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {screenshot_path}")

            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            try:
                page.screenshot(path=screenshot_path, full_page=True)
                print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
                allure.attach.file(screenshot_path, name=f"{test_name}_{browser_name}",
                                   attachment_type=allure.attachment_type.PNG)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

# –û—Ç–º–µ—á–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤
@pytest.fixture(scope='session')
def tests_iteration():
    print('\n= = = = = Iteration Started = = = = = ')
    yield
    print('\n= = = = = Iteration Finished = = = = = ')

# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ "—Ä–µ–≥—Ä–µ—Å—Å–∏—è"
@pytest.mark.regression
def tests_regression():
    yield


# ----MOBILE_DEVICES SETTINGS---
# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
@pytest.fixture(scope="function")
def browser_mobile(request):
    device = request.getfixturevalue("mobile_page")._context._options.get("device")
    browser_type = MOBILE_DEVICES[device]["defaultBrowserType"] if device in MOBILE_DEVICES else "chromium"
    with sync_playwright() as playwright:
        browser = getattr(playwright, browser_type).launch(headless=False)
        yield browser
        browser.close()

# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
@pytest.fixture(scope="function")
def mobile_page(browser_mobile, request):
    device = request.param
    if device in MOBILE_DEVICES:
        context = browser.new_context(**MOBILE_DEVICES[device])
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

    page = context.new_page()
    yield page
    page.close()
