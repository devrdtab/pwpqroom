from dis import print_instructions

import pytest
import allure
from playwright.sync_api import sync_playwright
from utils.date_utils import get_current_date


# @pytest.fixture(scope="function", params=["chromium", "firefox", "webkit"])
@pytest.fixture(scope="function", params=["chromium"])
def browser(request):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ Chrome, Firefox, WebKit"""
    with sync_playwright() as playwright:
        browser = getattr(playwright, request.param).launch(headless=True)
        yield browser
        browser.close()


@pytest.fixture(scope="function")
def page(browser):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    context = browser.new_context()
    page = context.new_page()
    yield page
    page.close()


@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ Allure"""
    outcome = yield
    report = outcome.get_result()

    if report.failed:  # –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω
        page = item.funcargs.get("page")  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Playwright
        browser_name = item.callspec.params["browser"]  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä

        if page:
            test_name = item.name
            timestamp = get_current_date().replace(":", "-")  # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è
            screenshot_path = f"screenshots/{test_name}_{browser_name}_{timestamp}.png"

            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            page.screenshot(path=screenshot_path, full_page=True)
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")

            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ Allure
            allure.attach.file(screenshot_path, name=f"{test_name}_{browser_name}",
                               attachment_type=allure.attachment_type.PNG)


@pytest.fixture(scope='session')
def tests_iteration():
    print('\n= = = = = Iteration Started = = = = = ')
    yield
    print('\n= = = = = Iteration Finished = = = = = ')

@pytest.mark.regression
def tests_regression():
    yield